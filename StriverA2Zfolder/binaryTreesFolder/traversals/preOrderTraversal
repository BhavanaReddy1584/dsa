// LC : 144 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



/*
// Recursive approach :   TC : O(n) and SC: O(n) = recursive stack space 
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) { // root, left, right
        List<Integer> l = new ArrayList<>();
        preorderHelper(root, l);
        return l;
    }

    private void preorderHelper(TreeNode node, List<Integer> l) {
        if (node == null) {
            return;
        }
        l.add(node.val); // Add the current node's value
        preorderHelper(node.left, l); // Traverse the left subtree
        preorderHelper(node.right, l); // Traverse the right subtree
    }
}                       */



// iterative approach : TC : O(n) and SC : O(n) 
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) { // root, left, right
        List<Integer> l = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();
        if(root == null){
            return l;
        }
        st.push(root);
        while(!st.isEmpty()){
            root = st.pop(); // top most elem of the stack 
            l.add(root.val);
            
            if(root.right != null){  // adding right first bcoz stack is LIFO 
                st.push(root.right);
            }
            // as we're adding left after right so, left one will be on top of stack 
            if(root.left != null){ 
                st.push(root.left);
            }
        }
        return l;
    }
}
