// Leetcode 239 : 
// https://takeuforward.org/data-structure/sliding-window-maximum/

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {

        /*
        // Brutre force : TC : O((n-k)*k) ans SC : O(n-k+!)
        int n = nums.length;
        int[] ans = new int[n-k+1];
        for(int i =0; i< n-k+1; i++){
            int maxi = nums[i];
            for(int j =i; j< i+k; j++){
                maxi = Math.max(maxi, nums[j]);
                ans[i] = maxi;
            }
        }
        return ans;                */

 
        // Optimal : TC : O(2N) ans SC : O(K) + O(N-K)
          if (nums == null || nums.length == 0) return new int[0];
        
        int n = nums.length;
        int[] ans = new int[n - k + 1];
        Deque<Integer> deque = new LinkedList<>(); // stores indices

        for (int i = 0; i < n; i++) {
            // Remove elements out of the current window from the front
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }
            
            // Remove elements smaller than the current one from the back
            // as it'll never be the max 
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }
            
            // Add current element index to the deque
            deque.offerLast(i);
            
            // Start recording results once we have at least `k` elements
            if (i >= k - 1) {
                ans[i - k + 1] = nums[deque.peekFirst()];
            }
        }
        
        return ans;

    }
}
