// Leetcode 496 : Next Greater Element - I

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {

        /*

        // Brute : (TC : O(n1*n2) and SC : O(n1))
        int n1 = nums1.length;
        int n2 = nums2.length; 
        int[] ans = new int[n1]; 
        Arrays.fill(ans, -1);
        int found = 0;
        for(int i =0; i< n1; i++){
            found = 0;
            for(int j = 0; j< n2; j++){
                if(nums1[i] == nums2[j]){
                    found = 1;
                }
                if(nums2[j] > nums1[i] && found == 1){
                    ans[i] = nums2[j];
                    break;
                }
            }
        }
        return ans;                       */

        
        /*
        // optimal approach : (TC : O(n1 + n2)  &  SC : O(n2 + n1)) 
        // n2 =space for hashmap and stack combined & n1 = space for the ans array  
        // using hashmap
        int n1 = nums1.length;
        int n2 = nums2.length;
        // hashmap to store the elems & their next greater elems 
        HashMap<Integer, Integer> hm = new HashMap<>();
        Stack<Integer> st = new Stack<>();
        // ans array to return answer
        int[] ans = new int[n1];


        for(int num: nums2){
            while(!st.isEmpty() && num > st.peek()){
                // storing small numa nd its next greatest in map 
                hm.put(st.pop(), num);
            }
            // storing the greater elem in stack
            st.push(num);
        }

        // for elems remaining in the stack that do not have a next greater elem :
        while(!st.isEmpty()){
            hm.put(st.pop(), -1);
        }

        // Fill the result for nums1 using the map :
        for(int i =0; i< n1; i++){
            ans[i] = hm.get(nums1[i]);   
        }
        return ans;                         */


        // optimal :  (TC : O(n1 + n2)  &  SC : O(n2 + n1))
        //  space for the stack : O(n2) and space for the ans array : O(n1)
        // without using a hashmap/ single stack usage :
        int n1 = nums1.length;
        int n2 = nums2.length;
        int[] ans = new int[n1];
        Stack<Integer> st = new Stack<>();

        Arrays.fill(ans, -1);

        for(int num: nums2){
            // when num is greater than stacks top elem :
            while(!st.isEmpty() && num > st.peek()){
                int currNum = st.pop();
                for(int i =0; i< n1; i++){
                    if(nums1[i] == currNum){
                        ans[i] = num;
                        break;
                    }
                }
            }
            // pushing the greater elem into the stack
            st.push(num);
        }
        return ans;
    }
} 
