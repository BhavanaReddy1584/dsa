// Leetcode 42 : Trapping Rain Water


class Solution {
    public int trap(int[] height) {


    /*
        // Brute force (TC : O(N*N) == O(N) and SC : O(1))
        int total = 0;
        int leftMax, rightMax;
        for(int i =0; i< height.length; i++){
            leftMax = prefMax(height, i);
            rightMax = sufixMax(height, i);
            if(height[i] < leftMax && height[i] < rightMax){
                total += Math.min(leftMax, rightMax) - height[i];
            }
        }
        return total;
    }

    // prefixMax function for finding the leftMax :
    // Find the maximum height from the left up to index i
    int prefMax(int[] arr, int i) {
        int max = arr[0]; // start with the 1st element 
        for (int j = 1; j <= i; j++) { // then check for the max from the left 
            max = Math.max(max, arr[j]);
        }
        return max;
    }

    // suffixMax funtion for finding the rightMax :
    // Find the maximum height from the right starting from index i
    int sufixMax(int[] arr, int i) {
        int n = arr.length;
        int max = arr[arr.length - 1]; // start with the last elem 
        for (int j = n - 2; j >= i; j--) {  // then check for max from right 
            max = Math.max(max, arr[j]);
        }
        return max;
    }                                          */

    
    /*
    // Better approach : TC = O(3*N) and SC = O(N) + O(N)

        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = height[0]; // the first elem will be as usual 
        for(int i =1; i< n; i++){
            leftMax[i] = Math.max(leftMax[i-1], height[i]); 
        }

        rightMax[n-1] = height[n-1]; // the last elem will be as usual
        for(int i =n-2; i>= 0; i--){
            rightMax[i] = Math.max(rightMax[i+1], height[i]);
        }

        int waterTrapped = 0;
        for(int i =0; i< n; i++){
            waterTrapped += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return waterTrapped;                                    */


        // optimal : TC = O(N) and SC = O(1)
        // Two pointers : 
        int n = height.length;
        int lMax = 0;
        int rMax = 0;
        int waterTrapped = 0;

        // pointers :
        int l =0;
        int r = n-1;
        while(l < r){
            if(height[l] <= height[r]){ // when left elem is smaller than 0r equal to the right elem 
                //Then max elem is in left. 
                //we'll calculate from lMax - arr[l] height for waterTrapped

                if(lMax > height[l]){ 
                    waterTrapped += lMax - height[l];
                }else{
                    lMax = height[l]; // found the left max elem 
                }
                l = l + 1;
            }else{  //when right elem is greater than the left one 

                // when max elem is in right. 
                //we'll calculate from rMax - arr[r] height for waterTrapped

                if(rMax > height[r]){
                    waterTrapped += rMax - height[r];
                }else{
                    rMax = height[r]; // found the right max elem
                }
                r = r - 1;
            }
        } 
        return waterTrapped;
    }
}
