// Leetcode 155 : Min Stack 

class MinStack {
    
    /*
    // Brute force => TC: O(1) and SC: (O*n) for 2 stacks space 
    // Two stacks: 'st' is the main stack, and 'minSt' keeps track of the minimum values
    public Stack<Integer> st;
    public Stack<Integer> minSt;

    // Constructor to initialize both stacks
    public MinStack() {
        st = new Stack<>();
        minSt = new Stack<>();
    }
    
    // Push method to add elements to the stack
    public void push(int val) {  // TC : O(1)
        st.push(val); // Push the value onto the main stack
        // If the min stack is empty, or the new value is less than or equal to the current minimum,
        // push it onto the min stack to track it as the new minimum
        if(minSt.isEmpty() || val <= minSt.peek()) {
            minSt.push(val);
        }
    }
    
    // Pop method to remove elements from the stack
    public void pop() {    // TC : O(1)
        int poppedValue = st.pop(); // Pop the top element from the main stack
        // If the popped value is the current minimum (i.e., top of the min stack),
        // pop it from the min stack as well
        if (poppedValue == minSt.peek()) {
            minSt.pop();
        }
    }
    
    // Top method to return the top element of the main stack
    public int top() {   // TC : O(1)
        return st.peek(); // Simply return the top element of the main stack
    }
    
    // getMin method to return the current minimum value
    public int getMin() {    // TC : O(1)
        return minSt.peek(); // Return the top of the min stack, which is the current minimum
    }                 
            
                                    */


    //  optimal approach => TC: O(1) and SC: O(n) for 1 stack space
    // if u can't understand dry run : push(12)  push(15)  push(10)  getMin   top  push(10)  top  

    Stack < Long > st = new Stack < Long > ();
    Long mini;

    public MinStack() {
        mini = Long.MAX_VALUE;
    }


    public void push(int val) { 
        Long value = Long.valueOf(val); // Convert int to Long
        if (st.isEmpty()) {
            mini = value;
            st.push(value);
        } else {
            if (value < mini) {
                st.push(2 * value - mini);
                mini = value;
            } else {
                st.push(value);
            }
        }
    }


    public void pop() {  
        if (st.isEmpty()) return;

        Long val = st.pop();
        if (val < mini) {
            mini = 2 * mini - val;
        }
    }


    public int top() {
        Long val = st.peek();
        if (val < mini) {
            return mini.intValue();
        }
        return val.intValue();
    }


    public int getMin() {  
        return mini.intValue();
    }
}


/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
