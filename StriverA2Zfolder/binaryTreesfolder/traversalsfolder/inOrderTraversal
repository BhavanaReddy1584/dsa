// LC : 94

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


/*
 // Recursive approach : 
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) { // left, root, right
        List<Integer> l = new ArrayList<>();
        inorderTraversalHelper(root, l);
        return l;
    }
    void inorderTraversalHelper(TreeNode root, List<Integer> l){
        if(root == null){
            return;
        }

        inorderTraversalHelper(root.left, l);
        l.add(root.val);
        inorderTraversalHelper(root.right, l);
    }
}                                  */


// iterative approach :
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) { // left, root, right
        List<Integer> l = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();
        if(root == null){ // when the given tree is empty, return empty list
            return l;
        }
        // intially, take the root of the tree and store it in node  
        TreeNode node = root;
        while(true){
            if(node != null){ // when there is an elem in node 
                st.push(node); // push it into the stack 
                node = node.left; // next check for the left elem of node 
            }else{ // when node == null
                if(st.isEmpty()){
                    break;
                }
                node = st.pop();
                l.add(node.val);
                node = node.right; // when all the left elems are complted
            }
        }
        return l;
    }
}
